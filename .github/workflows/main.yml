name: Build, Push Docker Image, and Release

on:
  workflow_dispatch:
  push:
    branches:
      - master
      - main
      - develop

jobs:
  setup-environment:
    runs-on: ubuntu-latest
    outputs:
      branch-name: ${{ steps.get-branch-name.outputs.branch_name }}
      version: ${{ steps.get-version.outputs.version }}
      repo-name: ${{ steps.get-repo-name.outputs.repo_name }}
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Get branch name
      - id: get-branch-name
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF_NAME}" | sed 's/[^a-zA-Z0-9_-]/-/g')
          if [ -z "$BRANCH_NAME" ]; then
            echo "Error: BRANCH_NAME is empty!"
            exit 1
          fi
          echo "::set-output name=branch_name::$BRANCH_NAME"

      # Get version using semantic-release (dry run)
      - id: get-version
        run: |
          VERSION=$(npx semantic-release --dry-run --no-ci | grep "The next release version is" | awk '{print $6}')
          if [ -z "$VERSION" ]; then
            echo "Error: VERSION is empty!"
            exit 1
          fi
          echo "::set-output name=version::$VERSION"

      # Determine repository name based on branch
      - id: get-repo-name
        run: |
          BRANCH_NAME=${{ steps.get-branch-name.outputs.branch_name }}
          if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
            echo "::set-output name=repo_name::api-production"
          elif [ "$BRANCH_NAME" = "develop" ]; then
            echo "::set-output name=repo_name::api-develop"
          else
            echo "::set-output name=repo_name::node-api"
          fi

  build-and-push:
    runs-on: ubuntu-latest
    needs: setup-environment
    steps:
      # Import environment setup outputs
      - name: Import setup outputs
        run: |
          BRANCH_NAME=${{ needs.setup-environment.outputs.branch-name }}
          VERSION=${{ needs.setup-environment.outputs.version }}
          REPO_NAME=${{ needs.setup-environment.outputs.repo-name }}

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Clean up old images
      - name: Clean up old images
        run: |
          BRANCH_NAME=${{ needs.setup-environment.outputs.branch-name }}
          VERSION=${{ needs.setup-environment.outputs.version }}
          REPO_NAME=${{ needs.setup-environment.outputs.repo-name }}
          
          docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:${BRANCH_NAME}-${VERSION} || true
          if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
            docker rmi -f ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:latest || true
          fi

      # Build Docker Image
      - name: Build Docker Image
        run: |
          BRANCH_NAME=${{ needs.setup-environment.outputs.branch-name }}
          VERSION=${{ needs.setup-environment.outputs.version }}
          REPO_NAME=${{ needs.setup-environment.outputs.repo-name }}

          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:${BRANCH_NAME}-${VERSION} .
          if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
            docker tag ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:${BRANCH_NAME}-${VERSION} ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:latest
          fi

      # Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          BRANCH_NAME=${{ needs.setup-environment.outputs.branch-name }}
          VERSION=${{ needs.setup-environment.outputs.version }}
          REPO_NAME=${{ needs.setup-environment.outputs.repo-name }}

          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:${BRANCH_NAME}-${VERSION}
          if [ "$BRANCH_NAME" = "master" ] || [ "$BRANCH_NAME" = "main" ]; then
            docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${REPO_NAME}:latest
          fi

  release:
    runs-on: ubuntu-latest
    needs: [setup-environment, build-and-push]
    if: ${{ needs.setup-environment.outputs.branch-name == 'master' || needs.setup-environment.outputs.branch-name == 'main' }}
    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run Semantic Release
      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
