name: Deploy Develop

on:
  push:
    branches:
      - develop

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.release_version.outputs.version }}

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      # Set up Node.js with the latest LTS version
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

#      # Install dependencies
#      - name: Install dependencies
#        run: npm install
#
#      # Run semantic-release
#      - name: Run semantic-release
#        env:
#          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
#        run: npx semantic-release

      # Get release version
      - name: Get release version
        id: release_version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "The current version is $VERSION"
          echo "::set-output name=version::$VERSION"

  build-image:
    runs-on: ubuntu-latest
    needs: make-release

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GH_TOKEN }}

      # Set up Node.js with the latest LTS version
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "lts/*"

      # Install dependencies
      - name: Install dependencies
        run: npm install

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Clean up old images
      - name: Clean up old images
        run: |
          BRANCH_NAME=$(echo "${GITHUB_REF_NAME}" | sed 's/refs\/heads\///' | sed 's/[^a-zA-Z0-9_-]/-/g')
          docker rmi -f${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REF_NAME}:latest || true

      - name: List all files
        run: ls -la

      # Build Docker Image
      - name: Build Docker Image
        run: |
          # Build the latest tag
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REF_NAME}:latest .

          # Build the versioned tag
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REF_NAME}:${{ needs.make-release.outputs.version }} .

      # Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          # Push the latest tag
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REF_NAME}:latest
          
          # Push the versioned tag
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${GITHUB_REF_NAME}:${{ needs.make-release.outputs.version }}

  deploy:
    runs-on: ubuntu-latest
    needs: build-image

    steps:
      # Login to server
      - name: Login to server
        run: |
          echo "Login to server"

      # Pull docker image
      - name: Pull docker image
        run: |
          echo "Pull docker image"

      # Docker-compose down
      - name: Docker-compose down
        run: |
          echo "Docker-compose down"

      # Clean old Image
      - name: Clean old Image
        run: |
          echo "Docker-compose down"

      # Docker-compose up -d
      - name: Docker-compose up -d
        run: |
          echo "Docker-compose up -d"

      # Exit
      - name: Exit
        run: |
          echo "Exit"
